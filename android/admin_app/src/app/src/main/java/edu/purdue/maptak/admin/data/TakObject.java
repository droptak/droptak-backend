package edu.purdue.maptak.admin.data;
import java.util.*;

/** Encapsulates all of the data for a single Tak
 *  Note that TakObjects are immutable, which means they cannot be edited once they are created
 *
 *      TO CREATE A BRAND NEW TAK
 *      1) Create an appropriate tak object WITHOUT an ID
 *      2) Get a MapTakDB object and call db.addTak(). Pass in the tak object and the appropriate MapID
 *
 *      TO DELETE A TAK
 *      1) Get a MapTakDB object and call db.removeTak(). Pass in the tak you want to delete.
 *
 *      TO MODIFY DATA ABOUT A TAK
 *      Currently this operation is not supported. It will be in the future.
 */

public class TakObject {

    /** Main label of the tak. Optional. */
    private String label;

    /** Latitude and longitude of the tak. Required. */
    private double latitude, longitude;

    /** Unique ID of the tak, generated by the server. Null or required */
    private TakID takID;

    /** Metadata about the tak */
    private Map<String, String> metadata;

    /** User who created the tak. Generated by the server. */
    private int createdBy;

    /** Unix timestamp of the date the server first registers the tak */
    private long createdOn;

    /** Constructor if everything is currently known */
    public TakObject(TakID takID, String label, double lat, double lng) {
        this.label = label;
        this.latitude = lat;
        this.longitude = lng;
        this.takID = takID;
        this.metadata = new HashMap<String, String>();
    }

    /** Minimum constructor if the ID is known */
    public TakObject(TakID takID, double lat, double lng) {
        this(takID, null, lat, lng);
    }

    /** Constructor if it has no ID but has a label */
    public TakObject(String label, double lat, double lng) {
        this(new TakID(UUID.randomUUID().toString().substring(0,12)), label, lat, lng);
    }

    /** Minimum constructor if the ID is not known */
    public TakObject(double lat, double lng) {
        this(new TakID(UUID.randomUUID().toString().substring(0,12)), null, lat, lng);
    }

    /** Returns the label of the tak */
    public String getLabel() {
        return this.label;
    }

    /** Returns the latitude of the given tak */
    public double getLatitude() {
        return this.latitude;
    }

    /** Returns the longitude of the given tak */
    public double getLongitude() {
        return longitude;
    }

    /** Returns the ID which keys this object in the master server database.
     *  Warning: This WILL COMMONLY RETURN NULL if the object was created without the ID
     *  being known. */
    public TakID getID() {
        return this.takID;
    }

    /** Returns all of the keys mapped by this tak's metadata */
    public Set<String> getMetadataKeys() {
        return metadata.keySet();
    }

    /** Returns all of the values mapped by this tak's metadata */
    public Set<String> getMetadataValues() {
        return new HashSet<String>(metadata.values());
    }

    /** Returns a value mapped by the given key to this tak's metadata */
    public String getMetadataValue(String key) {
        return metadata.get(key);
    }

    /** Returns the userid of the user who created the tak */
    public int getUserID() {
        return this.createdBy;
    }

    /** Returns the UNIX timestamp of when the tak was first registered to the server */
    public long getCreationTime() {
        return this.createdOn;
    }

}
